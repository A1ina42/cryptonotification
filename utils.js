const User = require("./db/models/User");
const {getAllPrice} = require("./api/axios.js");
require("dotenv").config();
const adminIds = process.env.ADMIN_IDS;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async function checkAdmin(uid) {
	return adminIds.includes(uid);
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ id
async function getUserById(uid) {
	const user = await User.findOne({uid});
	return user ? user : null;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async function createUser(user) {
	try {
		const uid = user.id;
		const username = user.username;
		const firstname = user.first_name;
		const region = user.language_code;
		return await User.create({
			uid,
			username,
			firstname,
			region,
		});
	} catch (err) {
		console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", err);
		return null;
	}
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ id
function deleteUser(uid) {
	User.deleteOne({uid}, function (err, employee) {
		if (err) {
			console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", err);
			return false;
		}
		return true;
	});
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function userSubscribe(uid, ctx) {
	const user = await getUserById(uid);
	if (user) {
		user.subscribes.push({
			name: ctx.session.name,
			percent: ctx.session.percent,
			interval: ctx.session.interval,
			price: ctx.session.price,
		});
		await user.save().then((data, err) => {
			if (err) console.error(err);
		});
		const formatInterval = minToDHM(ctx.session.interval);
		ctx.replyWithMarkdown(
			`–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ *${ctx.session.name}* –ø–æ —Ü–µ–Ω–µ *${ctx.session.price}* –¥–æ–±–∞–≤–ª–µ–Ω–∞\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: *${ctx.session.percent}*\n–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: *${formatInterval}*`
		);
	}
}

// –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async function userUnsubscribe(uid, currency) {
	const user = await getUserById(uid);
	if (user) {
		await User.updateOne({_id: user._id}, {$pull: {subscribes: {name: currency}}});
		await user.save();
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
async function getAllUsers() {
	return await User.find();
}

// "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
async function getMySubscribes(uid) {
	const me = await getUserById(uid);
	if (me.subscribes.length > 0) return me.subscribes;
	else return null;
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
async function getMySubscribesKeyboard(uid) {
	const meSubscribes = await getMySubscribes(uid);
	let subKeyboard = [];
	let message = "";
	let isKeyboardDefault = false;
	if (meSubscribes != null) {
		switch (meSubscribes.length) {
			case 10:
				for (let i = 0; i < 2; i++) {
					subKeyboard.push([
						meSubscribes[i * 5].name,
						meSubscribes[i * 5 + 1].name,
						meSubscribes[i * 5 + 2].name,
						meSubscribes[i * 5 + 3].name,
						meSubscribes[i * 5 + 4].name,
					]);
				}
				break;
			case 9:
				for (let i = 0; i < 3; i++) {
					subKeyboard.push([meSubscribes[i * 3].name, meSubscribes[i * 3 + 1].name, meSubscribes[i * 3 + 2].name]);
				}
				break;
			case 8:
				for (let i = 0; i < 2; i++) {
					subKeyboard.push([
						meSubscribes[i * 4].name,
						meSubscribes[i * 4 + 1].name,
						meSubscribes[i * 4 + 2].name,
						meSubscribes[i * 4 + 3].name,
					]);
				}
				break;
			case 7:
				for (let i = 0; i < 2; i++) {
					subKeyboard.push([meSubscribes[i * 3].name, meSubscribes[i * 3 + 1].name, meSubscribes[i * 3 + 2].name]);
				}
				subKeyboard.push([meSubscribes[6].name]);
				break;
			case 6:
				for (let i = 0; i < 2; i++) {
					subKeyboard.push([meSubscribes[i * 3].name, meSubscribes[i * 3 + 1].name, meSubscribes[i * 3 + 2].name]);
				}
				break;
			default:
				await meSubscribes.forEach((sub, index) => {
					subKeyboard.push(sub.name);
				});
				isKeyboardDefault = true;
				break;
		}

		await meSubscribes.forEach((sub, index) => {
			const formatInterval = minToDHM(sub.interval);
			message += `*${index + 1}. ${sub.name}*\n–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: _${
				sub.percent
			}_\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: _${formatInterval}_\n–¶–µ–Ω–∞: _${sub.price}$_\n\n`;
		});
		message += "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: ";
		if (isKeyboardDefault) subKeyboard = [subKeyboard];
	} else {
		message = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫";
	}
	subKeyboard.push(["–ù–∞–∑–∞–¥"]);
	return {message, subKeyboard};
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getCurrenciesStr() {
	const allUsers = await getAllUsers();
	let usersSubscribes = [];
	allUsers.forEach((user) => {
		user.subscribes.forEach((sub) => {
			usersSubscribes.push(sub.name);
		});
	});
	let currenciesStr = [...new Set(usersSubscribes)].join(",");
	return {allUsers, currenciesStr};
}

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
async function botSendMessage(bot) {
	const {allUsers, currenciesStr} = await getCurrenciesStr();
	getAllPrice(currenciesStr).then((allCur) => {
		allUsers.forEach((user) => {
			if (user.subscribes.length > 0) {
				user.subscribes.forEach((sub) => {
					let oldPrice = sub.price;
					let newPrice = allCur[sub.name].USD;
					let percentChange = (((newPrice - oldPrice) / oldPrice) * 100).toFixed(2);
					if (Math.abs(percentChange) >= sub.percent) {
						if (Date.now() - sub.updateTime.getTime() >= sub.interval * 60 * 1000) {
							let message =
								percentChange >= 0
									? `üü¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ${sub.name} –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ ${percentChange}%\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${oldPrice}$\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice}$\n`
									: `üî¥ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ${sub.name} —É–ø–∞–ª–∞ –Ω–∞ ${Math.abs(
											percentChange
									  )}%\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${oldPrice}$\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice}$`;
							bot.telegram
								.sendMessage(user.uid, message)
								.then(() => {
									updateFieldUser(user.uid, sub.name, "price", newPrice);
									updateFieldUser(user.uid, sub.name, "updateTime", Date.now());
								})
								.catch((err) => deleteUser(user.uid));
						}
					}
				});
			}
		});
	});
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è field –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã currency
async function updateFieldUser(uid, currency, field, value) {
	const user = await getUserById(uid);
	if (user) {
		user.subscribes.find((item) => {
			if (item.name === currency) {
				item[field] = value;
			}
		});
		await user.save().then((data, err) => {
			if (err) console.error(err);
		});
	}
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω—É—Ç –≤ –¥–Ω–∏, —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
function minToDHM(v) {
	v = Number(v);
	const d = Math.floor(v / 1440);
	const h = Math.floor((v % 1440) / 60);
	const m = Math.floor((v % 1440) % 60);
	const dDisplay = d > 0 ? d + " –¥–Ω. " : "";
	const hDisplay = h > 0 ? h + " —á. " : "";
	const mDisplay = m > 0 ? m + " –º–∏–Ω. " : "";
	return dDisplay + hDisplay + mDisplay;
}

module.exports.getUserById = getUserById;
module.exports.createUser = createUser;
module.exports.deleteUser = deleteUser;
module.exports.userSubscribe = userSubscribe;
module.exports.userUnsubscribe = userUnsubscribe;
module.exports.getMySubscribes = getMySubscribes;
module.exports.getMySubscribesKeyboard = getMySubscribesKeyboard;
module.exports.botSendMessage = botSendMessage;
module.exports.updateFieldUser = updateFieldUser;
module.exports.checkAdmin = checkAdmin;
